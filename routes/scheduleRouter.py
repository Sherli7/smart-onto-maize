from fastapi import APIRouter, HTTPException
from models.scheduleModel import create_schedule, get_schedules, get_schedule_by_id, update_schedule, delete_schedule, start_irrigation
from schema.scheduleSchema import ScheduleCreate, ScheduleUpdate, ScheduleResponse
import logging

# Configuration du logger en mode DEBUG
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

router = APIRouter(prefix="", tags=["Schedules"])


@router.post("", response_model=ScheduleResponse)
def add_schedule(schedule: ScheduleCreate):
    logger.debug("üì© Requ√™te re√ßue pour ajouter un planning: %s", schedule.dict())

    # üî• Log d√©taill√© pour les param√®tres
    logger.debug(
        "üõ†Ô∏è Param√®tres envoy√©s: field_id=%s, start_date=%s, start_time=%s, duration=%s, status=%s, flow_rate=%s, pump_ids=%s",
        schedule.field_id, schedule.start_date, schedule.start_time, schedule.duration, schedule.status,
        schedule.flow_rate, schedule.pump_ids)

    try:
        schedule_id = create_schedule(
            schedule.field_id,
            schedule.start_date,
            schedule.start_time,
            schedule.duration,
            schedule.status,
            schedule.flow_rate,
            schedule.pump_ids  # Assure-toi que c'est bien un tableau ici
        )
        logger.debug("‚úÖ ID du planning cr√©√©: %s", schedule_id)

        new_schedule = get_schedule_by_id(schedule_id)
        if not new_schedule:
            logger.error("‚ö†Ô∏è Erreur: le planning cr√©√© (ID %s) n'a pas √©t√© retrouv√© en base", schedule_id)
            raise HTTPException(status_code=500, detail="Erreur lors de la r√©cup√©ration du planning apr√®s cr√©ation")

        logger.debug("‚úÖ Planning ajout√© avec succ√®s: %s", new_schedule)
        return ScheduleResponse.from_db(new_schedule)
    except Exception as e:
        logger.error("‚ùå Erreur lors de l'ajout du planning: %s", e, exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))


@router.get("", response_model=list[ScheduleResponse])
def list_schedules():
    logger.debug("üì• Requ√™te re√ßue pour r√©cup√©rer tous les plannings")
    schedules = get_schedules()
    logger.debug("üìÑ %d plannings r√©cup√©r√©s", len(schedules))
    return [ScheduleResponse.from_db(s) for s in schedules]

@router.get("/{schedule_id}", response_model=ScheduleResponse)
def retrieve_schedule(schedule_id: int):
    logger.debug("üîç Requ√™te re√ßue pour r√©cup√©rer le planning ID: %s", schedule_id)
    schedule = get_schedule_by_id(schedule_id)
    if not schedule:
        logger.warning("‚ö†Ô∏è Planning introuvable: ID %s", schedule_id)
        raise HTTPException(status_code=404, detail="Planning non trouv√©")

    logger.debug("‚úÖ Planning trouv√©: %s", schedule)
    return ScheduleResponse.from_db(schedule)

@router.put("/{schedule_id}", response_model=ScheduleResponse)
def modify_schedule(schedule_id: int, updates: ScheduleUpdate):
    logger.debug("üõ†Ô∏è Requ√™te re√ßue pour modifier le planning ID: %s avec: %s", schedule_id, updates.dict())
    updated_schedule = update_schedule(schedule_id, updates.dict(exclude_unset=True))

    if not updated_schedule:
        logger.warning("‚ö†Ô∏è Aucun planning mis √† jour: ID %s", schedule_id)
        raise HTTPException(status_code=404, detail="Planning non trouv√©")

    logger.debug("‚úÖ Planning mis √† jour avec succ√®s: %s", updated_schedule)
    return ScheduleResponse.from_db(updated_schedule)

@router.delete("/{schedule_id}")
def remove_schedule(schedule_id: int):
    logger.debug("üóëÔ∏è Requ√™te re√ßue pour supprimer le planning ID: %s", schedule_id)
    try:
        deleted_id = delete_schedule(schedule_id)
        if not deleted_id:
            logger.warning("‚ö†Ô∏è Suppression √©chou√©e, planning ID %s introuvable", schedule_id)
            raise HTTPException(status_code=404, detail="Planning non trouv√©")

        logger.debug("‚úÖ Planning supprim√© avec succ√®s: ID %s", schedule_id)
        return {"message": "Planning supprim√© avec succ√®s"}
    except Exception as e:
        logger.error("‚ùå Erreur lors de la suppression du planning ID %s: %s", schedule_id, e, exc_info=True)
        raise HTTPException(status_code=500, detail="Erreur lors de la suppression du planning")

@router.post("/{schedule_id}/start", response_model=ScheduleResponse)
def start_schedule(schedule_id: int):
    logger.debug("üöÄ Requ√™te re√ßue pour d√©marrer l'irrigation du planning ID: %s", schedule_id)
    try:
        schedule = start_irrigation(schedule_id)
        if not schedule:
            logger.warning("‚ö†Ô∏è Impossible de d√©marrer l'irrigation: le planning ID %s est inexistant ou d√©j√† en cours", schedule_id)
            raise HTTPException(status_code=400, detail="Impossible de d√©marrer l'irrigation: planning inexistant ou d√©j√† en cours")

        logger.debug("‚úÖ Irrigation d√©marr√©e avec succ√®s: %s", schedule)
        return ScheduleResponse.from_db(schedule)
    except Exception as e:
        logger.error("‚ùå Erreur lors du d√©marrage de l'irrigation ID %s: %s", schedule_id, e, exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))
