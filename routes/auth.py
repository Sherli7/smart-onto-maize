import logging
from fastapi import APIRouter, Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import validate_email
from starlette.responses import JSONResponse

from models.baseModel import UserRole
from models.userModel import get_user_by_email, register_user
from utils.security import get_password_hash, verify_password, create_access_token, get_current_user
from schema.userSchema import UserCreate

logger = logging.getLogger(__name__)
router = APIRouter(prefix="", tags=["Authentification"])

# ‚úÖ D√©finition des r√¥les autoris√©s
VALID_ROLES = {"admin", "farmer", "other"}

@router.post("/register")
async def register(request: Request, user: UserCreate):
    """Cr√©er un nouvel utilisateur."""
    ip_address = request.client.host
    logger.info(f"üì© [REQ] Inscription - IP: {ip_address} - Email: {user.email}")

    # ‚úÖ V√©rifier le r√¥le
    if user.role not in UserRole.__members__.values():
        logger.warning(f"‚ùå Tentative d'inscription avec r√¥le invalide : {user.role}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="R√¥le invalide. Choisissez parmi: admin, farmer, other."
        )

    # ‚úÖ Valider l'email
    validate_email(str(user.email))

    # ‚úÖ V√©rifier si l'utilisateur existe d√©j√†
    existing_user = get_user_by_email(str(user.email))
    if existing_user:
        logger.warning(f"‚ö†Ô∏è √âchec inscription : Email d√©j√† utilis√© - {user.email}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Nom d'utilisateur ou email d√©j√† utilis√©"
        )

    try:
        # ‚úÖ Hacher le mot de passe
        hashed_password = get_password_hash(user.password)
        logger.debug(f"üîë Mot de passe hach√© g√©n√©r√© : {hashed_password}")

        # ‚úÖ Enregistrer l'utilisateur dans la base de donn√©es
        user_id = register_user(user.username, str(user.email), hashed_password, user.role)
        logger.info(f"‚úÖ [RES] Inscription r√©ussie : {user.email}")

        return {
            "id": user_id,
            "username": user.username,
            "email": user.email,
            "role": user.role
        }

    except Exception as e:
        logger.error(f"‚ùå [ERROR] Erreur lors de l'inscription : {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur interne du serveur"
        )

@router.post("/login")
def login(request: Request, form_data: OAuth2PasswordRequestForm = Depends()):
    """üîê Authentifier un utilisateur et retourner un token JWT."""
    ip_address = request.client.host
    logger.info(f"üîë Tentative de connexion depuis {ip_address} - Email: {form_data.username}")

    try:
        # ‚úÖ R√©cup√©rer l'utilisateur par email
        db_user = get_user_by_email(form_data.username)
        if not db_user:
            logger.warning(f"‚ö†Ô∏è Connexion √©chou√©e : Utilisateur non trouv√© - Email: {form_data.username}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email ou mot de passe incorrect"
            )

        logger.debug(f"üîé Utilisateur trouv√©: {db_user}")

        # ‚úÖ V√©rifier le mot de passe
        try:
            if not verify_password(form_data.password, db_user["password_hash"]):
                logger.warning(f"‚ö†Ô∏è Connexion √©chou√©e : Mot de passe incorrect - Email: {form_data.username}")
                logger.debug(f"üõ†Ô∏è Mot de passe en clair: {form_data.password} - Hash attendu: {db_user['password_hash']}")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail="Email ou mot de passe incorrect"
                )
        except Exception as bcrypt_error:
            logger.error(f"‚ùå Erreur bcrypt lors de la v√©rification du mot de passe : {bcrypt_error}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Erreur de validation du mot de passe"
            )

        # ‚úÖ G√©n√©rer un token JWT
        access_token = create_access_token(data={"sub": db_user["username"], "role": db_user["role"]})
        logger.info(f"‚úÖ Connexion r√©ussie pour {db_user['email']} depuis {ip_address}")

        # ‚úÖ Retourner la r√©ponse
        return JSONResponse(content={
            "access_token": access_token,
            "token_type": "bearer",
            "user_id": db_user["id"]
        })

    except HTTPException:
        # Relancer les exceptions HTTP d√©j√† g√©r√©es
        raise
    except Exception as e:
        # Journaliser les erreurs inattendues
        logger.error(f"‚ùå [ERROR] Erreur lors de l'authentification : {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur interne du serveur"
        )

@router.get("/users/me")
def get_me(current_user: dict = Depends(get_current_user)):
    """R√©cup√©rer les informations de l'utilisateur actuellement authentifi√©."""
    return current_user
